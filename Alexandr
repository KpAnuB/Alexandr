from dataclasses import dataclass


@dataclass
class InfoMessage:
    training_type: str
    duration: float
    distance: float
    speed: float
    calories: float

    def get_message(self) -> str:
        """Метод возвращения сообщения"""
        return (f'Тип тренировки: {self.training_type}; '
                f'Длительность: {self.duration:.3f} ч.; '
                f'Дистанция: {self.distance:.3f} км; '
                f'Ср. скорость: {self.speed:.3f} км/ч; '
                f'Потрачено ккал: {self.calories:.3f}.')


class Training:
    """Базовый класс тренировки."""

    LEN_STEP = 0.65  # Константа шагов в метре.
    M_IN_KM = 1000  # Константа метров в километрах.
    MIN_IN_H = 60  # Константа минут в часах.

    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float,
                 ) -> None:
        self.action = action
        self.duration = duration
        self.weight = weight

    def get_distance(self) -> float:
        """Получить дистанцию в км."""
        return self.action * self.LEN_STEP / self.M_IN_KM

    def get_mean_speed(self) -> float:
        """Получить среднюю скорость движения."""
        return self.get_distance() / self.duration

    def get_spent_calories(self) -> float:
        """Получить количество затраченных калорий."""
        pass

    def show_training_info(self) -> InfoMessage:
        """Вернуть информационное сообщение о выполненной тренировке."""
        return InfoMessage(self.__class__.__name__, self.duration,
                           self.get_distance(), self.get_mean_speed(),
                           self.get_spent_calories())


class Running(Training):  # [15000, 1, 75]
    """Тренировка: бег."""
    CALORIES_MEAN_SPEED_MULTIPLIER = 18
    CALORIES_MEAN_SPEED_SHIFT = 1.79

    def get_spent_calories(self) -> float:
        return ((self.CALORIES_MEAN_SPEED_MULTIPLIER
                * self.get_mean_speed() + self.CALORIES_MEAN_SPEED_SHIFT)
                * self.weight / self.M_IN_KM * (self.duration * self.MIN_IN_H))


class SportsWalking(Training):  # [9000, 1, 75, 180]
    """Тренировка: спортивная ходьба."""

    COEF_FOR_WEIGHT = 0.035  # Коэффициент для подсчета калорий.
    COEF_FOR_WALKING = 0.029  # Коэффициент для подсчета калорий.
    KMH_IN_MS = 0.278  # КМ/Ч в Метрах/секунду.
    SM_IN_M = 100  # СМ в метрах.

    def __init__(self, action: int, duration: float, weight: float,
                 height: int) -> None:
        super().__init__(action, duration, weight)
        self.height = height

    def get_spent_calories(self) -> float:
        return ((self.COEF_FOR_WEIGHT * self.weight + ((self.KMH_IN_MS
                * self.get_mean_speed())**2 / (self.height / self.SM_IN_M))
            * self.COEF_FOR_WALKING * self.weight)
            * (self.duration * self.MIN_IN_H))


class Swimming(Training):  # [720, 1, 80, 25, 40]
    """Тренировка: плавание."""
    LEN_STEP = 1.38  # Переопределённая константа для плавания.
    COEF_FOR_SPEED_SWIM = 1.1  # Коэффициент для подсчета калорий.
    COEF_FOR_SWIM = 2  # Коэффициент для подсчета калорий.

    def __init__(self, action, duration, weight, length_pool, count_pool):
        self.length_pool = length_pool
        self.count_pool = count_pool
        super().__init__(action, duration, weight)

    def get_mean_speed(self):
        return (self.length_pool
                * self.count_pool / self.M_IN_KM / self.duration)

    def get_spent_calories(self):
        return ((self.get_mean_speed() + self.COEF_FOR_SPEED_SWIM)
                * self.COEF_FOR_SWIM * self.weight * self.duration)


def read_package(workout_type: str, data: list) -> Training:
    """Прочитать данные полученные от датчиков."""
    workout_types: dict[str, type[Training]] = {'SWM': Swimming,
                                                'RUN': Running,
                                                'WLK': SportsWalking}

    if workout_type not in workout_types:
        raise TypeError('Ошибка в пакетах данных')
    return workout_types[workout_type](*data)


def main(training: Training) -> None:
    """Главная функция. Принимает на вход экземпляр класса Training"""
    info: InfoMessage = training.show_training_info()
    print(info.get_message())  # С указанием переменной.


if __name__ == '__main__':
    packages = [
        ('SWM', [720, 1, 80, 25, 40]),
        ('RUN', [15000, 1, 75]),
        ('WLK', [9000, 1, 75, 180])
    ]

    for workout_type, data in packages:
        training = read_package(workout_type, data)
        main(training)
